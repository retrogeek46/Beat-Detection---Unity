<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Deque</name>
    </assembly>
    <members>
        <member name="T:System.Collections.Generic.Deque`1">
            <summary>
            A genetic Deque class. It can be thought of as
            a double-ended queue, hence Deque. This allows for
            an O(1) AddFront, AddBack, RemoveFront, RemoveBack.
            The Deque also has O(1) indexed lookup, as it is backed
            by a circular array.
            </summary>
            <typeparam name="T">
            The type of objects to store in the deque.
            </typeparam>
        </member>
        <member name="F:System.Collections.Generic.Deque`1.defaultCapacity">
            <summary>
            The default capacity of the deque.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Deque`1.startOffset">
            <summary>
            The first element offset from the beginning of the data array.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Deque`1.buffer">
            <summary>
            The circular array holding the items.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.#ctor">
            <summary>
            Creates a new instance of the Deque class with
            the default capacity.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the Deque class with
            the specified capacity.
            </summary>
            <param name="capacity">The initial capacity of the Deque.</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a new instance of the Deque class with the elements
            from the specified collection.
            </summary>
            <param name="collection">The co</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Deque.
            </summary>
            <returns>
            An iterator that can be used to iterate through the Deque.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Deque.
            </summary>
            <returns>
            An iterator that can be used to iterate through the Deque.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.Add(`0)">
            <summary>
            Adds an item to the Deque.
            </summary>
            <param name="item">The object to add to the Deque.</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.Clear">
            <summary>
            Removes all items from the Deque.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.Contains(`0)">
            <summary>
            Determines whether the Deque contains a specific value.
            </summary>
            <param name="item">The object to locate in the Deque.</param>
            <returns>
            true if item is found in the Deque; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.CopyTo(`0[],System.Int32)">
            <summary>
                Copies the elements of the Deque to a System.Array,
                starting at a particular System.Array index.
            </summary>
            <param name="array">
                The one-dimensional System.Array that is the destination of
                the elements copied from the Deque. The System.Array must
                have zero-based indexing.
            </param>
            <param name="arrayIndex">
                The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
                array is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                arrayIndex is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
                The number of elements in the source Deque is greater than
                the available space from arrayIndex to the end of the
                destination array.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the Deque.
            </summary>
            <param name="item">The object to remove from the Deque.</param>
            <returns>
                true if item was successfully removed from the Deque;
                otherwise, false. This method also returns false if item
                is not found in the original
            </returns>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the Deque at the specified index.
            </summary>
            <param name="index">
            The zero-based index at which item should be inserted.
            </param>
            <param name="item">The object to insert into the Deque.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the Deque.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the deque.
            </summary>
            <param name="item">The object to locate in the deque.</param>
            <returns>
            The index of the item if found in the deque; otherwise, -1.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the Deque.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.AddFront(`0)">
            <summary>
            Adds the provided item to the front of the Deque.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.AddBack(`0)">
            <summary>
            Adds the provided item to the back of the Deque.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.RemoveFront">
            <summary>
            Removes an item from the front of the Deque and returns it.
            </summary>
            <returns>The item at the front of the Deque.</returns>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.RemoveBack">
            <summary>
            Removes an item from the back of the Deque and returns it.
            </summary>
            <returns>The item in the back of the Deque.</returns>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of items to the Deque.
            </summary>
            <param name="collection">The collection to add.</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.AddFrontRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of items to the front of the Deque.
            </summary>
            <param name="collection">The collection to add.</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.AddFrontRange(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            Adds count items from a collection of items
            from a specified index to the Deque.
            </summary>
            <param name="collection">The collection to add.</param>
            <param name="fromIndex">
            The index in the collection to begin adding from.
            </param>
            <param name="count">
            The number of items in the collection to add.
            </param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.AddBackRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of items to the back of the Deque.
            </summary>
            <param name="collection">The collection to add.</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.AddBackRange(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            Adds count items from a collection of items
            from a specified index to the back of the Deque.
            </summary>
            <param name="collection">The collection to add.</param>
            <param name="fromIndex">
            The index in the collection to begin adding from.
            </param>
            <param name="count">
            The number of items in the collection to add.
            </param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a collection of items into the Deque
            at the specified index.
            </summary>
            <param name="index">
            The index in the Deque to insert the collection.
            </param>
            <param name="collection">The collection to add.</param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
            Inserts count items from a collection of items from a specified
            index into the Deque at the specified index.
            </summary>
            <param name="index">
            The index in the Deque to insert the collection.
            </param>
            <param name="collection">The collection to add.</param>
            <param name="fromIndex">
            The index in the collection to begin adding from.
            </param>
            <param name="count">
            The number of items in the colleciton to add.
            </param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
                Removes a range of elements from the view.
            </summary>
            <param name="index">
                The index into the view at which the range begins.
            </param>
            <param name="count">
                The number of elements in the range. This must be greater
                than 0 and less than or equal to <see cref="P:System.Collections.Generic.Deque`1.Count"/>.
            </param>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.Get(System.Int32)">
            <summary>
            Gets the value at the specified index of the Deque
            </summary>
            <param name="index">The index of the Deque.</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.Deque`1.Set(System.Int32,`0)">
            <summary>
            Sets the value at the specified index of the
            Deque to the given item.
            </summary>
            <param name="index">The index of the deque to set the item.</param>
            <param name="item">The item to set at the specified index.</param>
        </member>
        <member name="P:System.Collections.Generic.Deque`1.Capacity">
            <summary>
            Gets or sets the total number of elements
            the internal array can hold without resizing.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Deque`1.IsFull">
            <summary>
            Gets whether or not the Deque is filled to capacity.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Deque`1.IsEmpty">
            <summary>
            Gets whether or not the Deque is empty.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Deque`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the Deque is read-only.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Deque`1.Count">
            <summary>
            Gets the number of elements contained in the Deque.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Deque`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">
                The zero-based index of the element to get or set.
            </param>
            <returns>The element at the specified index</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> is not a valid index in this deque
            </exception>
        </member>
        <member name="M:DequeUtility.Utility.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Jon Skeet's excellent reimplementation of LINQ Count.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <param name="source">The source IEnumerable.</param>
            <returns>The number of items in the source.</returns>
        </member>
    </members>
</doc>
